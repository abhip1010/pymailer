# Python CircleCI 2.0 configuration file
#
# Check https://circleci.com/docs/2.0/language-python/ for more details
#
version: 2
jobs:
  build:
    docker:
      # specify the version you desire here
      # use `-browsers` prefix for selenium tests, e.g. `3.6.1-browsers`
      # - image: circleci/python:3.6.1
      - image: google/cloud-sdk
      
      # Specify service dependencies here if necessary
      # CircleCI maintains a library of pre-built images
      # documented at https://circleci.com/docs/2.0/circleci-images/
      # - image: circleci/postgres:9.4

    working_directory: ~/repo

    steps:
      - checkout

      - setup_remote_docker:   # (2)
          docker_layer_caching: true # (3)
          
      # Download and cache dependencies
      # - restore_cache:
      #    keys:
      #    - v1-dependencies-{{ checksum "requirements.txt" }}
      #    # fallback to using the latest cache if no exact match is found
      #    - v1-dependencies-

      - run:
          name: install dependencies
          command: |
            apt-get update
            apt-get --only-upgrade  --yes --force-yes install kubectl google-cloud-sdk google-cloud-sdk-datastore-emulator google-cloud-sdk-pubsub-emulator google-cloud-sdk-app-engine-go google-cloud-sdk-app-engine-java google-cloud-sdk-app-engine-python google-cloud-sdk-cbt google-cloud-sdk-bigtable-emulator google-cloud-sdk-app-engine-python-extras google-cloud-sdk-datalab
            # python3 -m venv venv
            # . venv/bin/activate
            # pip install -r requirements.txt

      - deploy:
          name: setup gcloud
          command: |
            echo $GCLOUD_SERVICE_KEY | base64 --decode --ignore-garbage > ${HOME}/gcloud-service-key.json
            # echo $GCLOUD_SERVICE_KEY | base64 --decode --ignore-garbage 
            # gcloud --quiet components update
            gcloud auth activate-service-account --key-file=${HOME}/gcloud-service-key.json
            gcloud config set project high-service-196906
            gcloud --quiet config set compute/zone asia-southeast1-a
            gcloud container clusters create hello-cluster --num-nodes=3
            gcloud compute instances list
            gcloud container clusters get-credentials hello-cluster
            ls
            pwd            
            docker build -t gcr.io/high-service-196906/pymailer .
            gcloud docker -- push gcr.io/high-service-196906/pymailer
            kubectl run hello-web --image=gcr.io/high-service-196906/pymailer
            kubectl get pods



      #- save_cache:
      #    paths:
      #      - ./venv
      #    key: v1-dependencies-{{ checksum "requirements.txt" }}
        
      # run tests!
      # this example uses Django's built-in test-runner
      # other common Python testing frameworks include pytest and nose
      # https://pytest.org
      # https://nose.readthedocs.io
# - run:
#     name: run tests
#     command: |
#       . venv/bin/activate
      #      # python manage.py test

      #- store_artifacts:
      #    path: test-reports
      #    destination: test-reports
